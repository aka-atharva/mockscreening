(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[177],{7582:(e,t,r)=>{Promise.resolve().then(r.t.bind(r,9324,23)),Promise.resolve().then(r.bind(r,1069))},1069:(e,t,r)=>{"use strict";r.d(t,{A:()=>c,AuthProvider:()=>l});var o=r(5155),a=r(2115),s=r(6046);let n=(0,a.createContext)(void 0),i=[{username:"admin",password:"admin123",email:"admin@example.com",role:"admin"},{username:"researcher",password:"password",email:"researcher@example.com",role:"researcher"},{username:"user",password:"password",email:"user@example.com",role:"user"}];function l(e){let{children:t}=e,[r,l]=(0,a.useState)(null),[c,u]=(0,a.useState)(!0),[h,d]=(0,a.useState)(null),[m,p]=(0,a.useState)(!1),f=(0,s.useRouter)();(0,a.useEffect)(()=>{let e=localStorage.getItem("user");if(e)try{l(JSON.parse(e))}catch(e){console.error("Failed to parse stored user",e),localStorage.removeItem("user")}u(!1)},[]),(0,a.useEffect)(()=>{(async()=>{try{await fetch("".concat("http://localhost:8000/api","/health"),{method:"GET",headers:{Accept:"application/json"},signal:AbortSignal.timeout(5e3)}),p(!1)}catch(e){console.warn("API unavailable, using fallback mode:",e),p(!0)}})()},[]);let g=async(e,t)=>{u(!0),d(null);try{if(m){console.log("Using fallback authentication mode"),await new Promise(e=>setTimeout(e,500));let r=i.find(r=>r.username===e&&r.password===t);if(!r)throw Error("Invalid username or password");let o={username:r.username,role:r.role};localStorage.setItem("token","mock-token"),localStorage.setItem("user",JSON.stringify(o)),l(o),f.push("/");return}let r="".concat("http://localhost:8000/api","/auth/token");console.log("Attempting to login at:",r);let o=await fetch(r,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({username:e,password:t})}),a=o.headers.get("content-type");if(!a||!a.includes("application/json")){let e=await o.text();throw console.error("Received non-JSON response:",e.substring(0,200)+"..."),console.log("Switching to fallback mode due to non-JSON response"),p(!0),Error("Server returned non-JSON response. Switching to fallback mode.")}if(!o.ok){let e=await o.json();throw Error(e.detail||"Login failed")}let s=await o.json();localStorage.setItem("token",s.access_token),localStorage.setItem("user",JSON.stringify({username:s.username,role:s.role})),l({username:s.username,role:s.role}),f.push("/")}catch(e){console.error("Login error:",e),e instanceof Error?d(e.message):d("Login failed. Please check if the API server is running."),(e instanceof TypeError&&"Failed to fetch"===e.message||e instanceof Error&&e.message.includes("non-JSON response"))&&(d("Cannot connect to the authentication server. Switching to fallback mode."),p(!0))}finally{u(!1)}},w=async function(e,t,r){let o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"user";u(!0),d(null);try{if(m){if(console.log("Using fallback registration mode"),await new Promise(e=>setTimeout(e,500)),i.some(t=>t.username===e))throw Error("Username already registered");if(i.some(e=>e.email===t))throw Error("Email already registered");i.push({username:e,email:t,password:r,role:o}),await g(e,r);return}let a="".concat("http://localhost:8000/api","/auth/register");console.log("Attempting to register at:",a);let s=await fetch(a,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({username:e,email:t,password:r,role:o})}),n=s.headers.get("content-type");if(!n||!n.includes("application/json")){let e=await s.text();throw console.error("Received non-JSON response:",e),Error("Server returned non-JSON response. API might be unavailable.")}if(!s.ok){let e=await s.json();throw Error(e.detail||"Registration failed")}await g(e,r)}catch(e){console.error("Registration error:",e),d(e instanceof Error?e.message:"Registration failed. Please check if the API server is running."),e instanceof TypeError&&"Failed to fetch"===e.message&&(d("Cannot connect to the registration server. Try using the fallback mode."),p(!0)),u(!1)}},S=async e=>{u(!0),d(null);try{if(m){console.log("Using fallback forgot password mode"),await new Promise(e=>setTimeout(e,500)),i.find(t=>t.email===e);return}let t="".concat("http://localhost:8000/api","/auth/forgot-password");console.log("Requesting password reset at:",t);let r=await fetch(t,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({email:e})}),o=r.headers.get("content-type");if(!o||!o.includes("application/json")){let e=await r.text();throw console.error("Received non-JSON response:",e),Error("Server returned non-JSON response. API might be unavailable.")}if(!r.ok){let e=await r.json();throw Error(e.detail||"Failed to process request")}}catch(e){console.error("Forgot password error:",e),d(e instanceof Error?e.message:"Failed to process request. Please check if the API server is running."),e instanceof TypeError&&"Failed to fetch"===e.message&&(d("Cannot connect to the server. Try using the fallback mode."),p(!0))}finally{u(!1)}},y=async(e,t)=>{u(!0),d(null);try{if(m){console.log("Using fallback reset password mode"),await new Promise(e=>setTimeout(e,500));return}let r="".concat("http://localhost:8000/api","/auth/reset-password");console.log("Resetting password at:",r);let o=await fetch(r,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({token:e,password:t})}),a=o.headers.get("content-type");if(!a||!a.includes("application/json")){let e=await o.text();throw console.error("Received non-JSON response:",e),Error("Server returned non-JSON response. API might be unavailable.")}if(!o.ok){let e=await o.json();throw Error(e.detail||"Failed to reset password")}}catch(e){throw console.error("Reset password error:",e),d(e instanceof Error?e.message:"Failed to reset password. Please check if the API server is running."),e instanceof TypeError&&"Failed to fetch"===e.message&&(d("Cannot connect to the server. Try using the fallback mode."),p(!0)),e}finally{u(!1)}};return(0,o.jsx)(n.Provider,{value:{user:r,login:g,register:w,forgotPassword:S,resetPassword:y,logout:()=>{localStorage.removeItem("token"),localStorage.removeItem("user"),l(null),f.push("/")},isLoading:c,error:h,useFallbackMode:m},children:t})}function c(){let e=(0,a.useContext)(n);if(void 0===e)throw Error("useAuth must be used within an AuthProvider");return e}},6046:(e,t,r)=>{"use strict";var o=r(6658);r.o(o,"usePathname")&&r.d(t,{usePathname:function(){return o.usePathname}}),r.o(o,"useRouter")&&r.d(t,{useRouter:function(){return o.useRouter}}),r.o(o,"useSearchParams")&&r.d(t,{useSearchParams:function(){return o.useSearchParams}})},9324:()=>{}},e=>{var t=t=>e(e.s=t);e.O(0,[533,441,517,358],()=>t(7582)),_N_E=e.O()}]);